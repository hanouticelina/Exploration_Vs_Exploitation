#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import tic_tac_toe as ttt
import benchmark as bm

games = [ttt.MorpionState, ttt.Puissance4State]
players = [ttt.RandomPlayer, ttt.MonteCarloPlayer, ttt.UCTPlayer]

class ExitException(Exception):
    pass

class GoBackException(Exception):
    pass

def menu(title, choices):
    print(f'\n============================== {title} ==============================')
    for i in range(len(choices)):
        print(f'{i+1}. {choices[i]}')
    print('==================================================================')
    while True:
        try:
            ch = input('Enter your choice (press ''q'' to exit): ')
            ch = int(ch)
            if 0 < ch and ch <= len(choices):
                return ch - 1
            else:
                raise GoBackException
        except:
            if ch == 'q':
                raise ExitException
            print(f'Please enter a choice between 1 and {1 + len(choices)}')
    
def visualise_game():
    try:
        game = games[menu('Game', ['Tic-tac-toe', 'Connect Four'])]()
    except ExitException:
        raise GoBackException
    
    p1_ch = menu('1st player', ['Random player', 'Monte Carlo player', 'Upper confidence tree player'])
    args = []
    if p1_ch != 0:
        try:
            args.append( int(input('How many simulations per action? ')) )
            player1 = players[p1_ch](*args)
        except:
            raise GoBackException
    
    p2_ch = menu('2st player', ['Random player', 'Monte Carlo player', 'Upper confidence tree player'])
    args = []
    if p2_ch != 0:
        try:
            args.append( int(input('How many simulations per action? ')) )
            player2 = players[p2_ch](*args)
        except:
            raise GoBackException
    
    verbose = input('Do you wish to print the log (yes/no)? ')
    if verbose == 'y' or verbose == 'yes': verbose = True
    else: verbose = False
    
    winner, log = ttt.Jeu(game, player1, player2).run(draw=True)
    if verbose:
        print(log)
        
def test_algo():
    names = ['Monte Carlo', 'Upper Confidence Tree']
    p_ch = menu('Player', names) + 1
    if p_ch == 2:
        try:
            expl_params = input('Please specify the exploration parameter values separated by espaces: ')
            expl_params = list(map(float, expl_params.split()))
        except:
            raise GoBackException    
    try:
        N = int(input('How many simulations per action? '))
        player = players[p_ch](N)
        nb_games = int(input('How many games do you wish to play out? '))
    except:
        raise GoBackException
        
    reverse = input(f'Do you want the {names[p_ch-1]} to start the games (yes/no)? ')
    if reverse == 'y' or reverse == 'yes': reverse = False
    else: reverse = True
    
    if p_ch == 2:
        bm.benchmark_uct(player,nb_games,expl_params,N,reverse)
    else:
        bm.benchmark_mc(player,nb_games,N,reverse)
        
def main():
    choices = [visualise_game, test_algo]
    while True:
        try:
            ch = menu('MAIN', ['Visualise a game', 'Evaluate our players'' performance'])
            choices[ch]()
        except GoBackException:
            pass
        except ExitException:
            break

if __name__ == "__main__":
    main()