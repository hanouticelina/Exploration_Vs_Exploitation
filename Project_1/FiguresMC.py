import numpy as np
import matplotlib.pyplot as plt
import tictactoe_etu as ttt
import utils as ut

labels = ["Random player", "Monte Carlo player","UCTree player"]
def Play(Player1,Player2, N1 = None, N2 = None):
    """
    TODO
    """
    if N1 is None:
        J1 = Player1()
    else:
        J1 = Player1(N1)
    if N2 is None:
        J2 = Player2()
    else:
        J2 = Player2(N2)
    Game = ttt.Jeu(ttt.MorpionState(),J1,J2).run(draw=True)

def histogram(nbIter,Player1,Player2,N1 = None, N2 = None):
    """
    """
    plt.rcdefaults()
    fig, ax = plt.subplots()
    players = np.array([str(Player1),str(Player2),'Draws'])
    performance = np.arange(len(players))
    for i in range(nbIter):
        if N1 is None:
            J1 = Player1()
        else:
            J1 = Player1(N1)
        if N2 is None:
            J2 = Player2()
        else:
            J2 = Player2(N2)
        winner = ttt.Jeu(ttt.MorpionState(),J1,J2).run(draw = False)[0]
        if winner == 1:
            performance[0] +=1
        elif winner == -1:
            performance[1] +=1
        else:
            performance[2] +=1
    xs = [i + 0.2   for i, _ in enumerate(players)]
    plt.bar(xs, performance)
    plt.ylabel("Number of won games")
    plt.xticks([i + 0.2 for i, _ in enumerate(players)], players)
    plt.show()

def simulation(nb_iter, Player1, Player2,labels, N1 = None, N2 = None):
    """
    TODO
    """
    mean1 = np.zeros(nb_iter)
    mean2 = np.zeros(nb_iter)
    xs = np.arange(nb_iter)
    if N1 is None:
        J1 = Player1()
        strJ1 = labels[0]
    else:
        J1 = Player1(N1)
        strJ1 = labels[1]
    if N2 is None:
        J2 = Player2()
        strJ2 = labels[0]
    else:
        J2 = Player2(N2)
        strJ2 = labels[1]
    winner1 = 0
    winner2 = 0
    for i in range(1,nb_iter):
        w = ttt.Jeu(ttt.MorpionState(),J1,J2).run()[0]
        if w == 1:
            winner1 += 1
        elif w == -1:
            winner2 += 1
        mean1[i] = float(winner1)/i
        mean2[i] = float(winner2)/i
    plt.plot(xs,mean1,'g-',label = "Joueur 1 : "+strJ1)
    plt.plot(xs,mean2,'r-',label = "Joueur 2 : " +strJ2)

    plt.legend(["Joueur 1 : "+strJ1, "Joueur 2 : " +strJ2])
    plt.show()

def becnhmarck_uct_single(player,nb_games,expl_params,other):
    ys = np.zeros((len(expl_params), nb_games))
    for i in range(len(expl_params)):
        ut.UCTree.c = expl_params[i]
        for j in range(nb_games):
            J1 = player
            J2 = other
            winner = ttt.Jeu(ttt.MorpionState(),J1,J2).run()[0]
            if winner == 1:
                ys[i][j] = 1
    return ys.cumsum(axis=1) / (1+np.arange(nb_games))

def benchmark_uct(player,nb_games,expl_params,N):
    """
    """
    legend = [f'c = {c}' for c in expl_params]
    rand = becnhmarck_uct_single(player,nb_games,expl_params,ttt.RandomPlayer())
    mc = becnhmarck_uct_single(player,nb_games,expl_params,ttt.MonteCarloPlayer(N))
    ut.plot_all('Games', 'Average victory rate', legend, rand)
    ut.plot_all('Games', 'Average victory rate', legend, mc)