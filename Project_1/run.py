#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import numpy as np
import matplotlib.pyplot as plt

import tictactoe_etu as ttt
import utils as ut
import FiguresMC as fig

games = [ttt.MorpionState, ttt.Puissance4State]
players = [ttt.RandomPlayer, ttt.MonteCarloPlayer, ttt.UCTPlayer]

class ExitException(Exception):
    pass

class GoBackException(Exception):
    pass

def menu(title, choices):
    """
    TODO
    """
    print(f'\n============================== {title} ==============================')
    for i in range(len(choices)):
        print(f'{i+1}. {choices[i]}')
    print('==================================================================')
    try:
        ch = input('Enter your choice (press ''q'' to exit): ')
        return int(ch) - 1
    except ValueError:
        if ch == 'q':
            raise ExitException
        print(f'Please enter a choice between 1 and {1 + len(choices)}')
        menu(title, choices)
    
def visualise_game():
    try:
        game = games[menu('Game', ['Tic-tac-toe', 'Connect Four'])]()
    except ExitException:
        raise GoBackException
    
    p1_ch = menu('1st player', ['Random player', 'Monte Carlo player', 'Upper confidence tree player'])
    args = []
    if p1_ch != 0:
        try:
            args.append( int(input('How many simulations per action? ')) )
        except:
            raise GoBackException
    player1 = players[p1_ch](*args)
    
    p2_ch = menu('2st player', ['Random player', 'Monte Carlo player', 'Upper confidence tree player'])
    args = []
    if p2_ch != 0:
        try:
            args.append( int(input('How many simulations per action? ')) )
        except:
            raise GoBackException
    player2 = players[p2_ch](*args)
    
    verbose = input('Do you wish to print the log (y/n)? ')
    if verbose == 'y' or verbose == 'yes': verbose = True
    else: verbose = False
    
    winner, log = ttt.Jeu(game, player1, player2).run(draw=True)
    if verbose:
        print(log)
        
def test_algo():
    p1_ch = menu('Player', ['Monte Carlo', 'Upper Confidence Tree']) + 1
    if p1_ch == 2:
        try:
            factors = input('Please specify the exploration parameter values separated by espaces: ')
            factors = list(map(float, factors.split()))
        except:
            raise GoBackException    
    try:
        N = int(input('How many simulations per action? '))
    except:
        raise GoBackException
    player = players[p1_ch](N)
    
    try:
        nb_games = int(input('How many games do you wish to play out? '))
    except:
        raise GoBackException
    
    if p1_ch:
        fig.benchmark_uct(player,nb_games,factors,N)
    else:
        pass #TODO
        
def main():
    choices = [visualise_game, test_algo]
    while True:
        try:
            ch = menu('MAIN', ['Visualise a game', 'Evaluate our players'' performance'])
            choices[ch]()
        except GoBackException:
            pass
        except ExitException:
            break

if __name__ == "__main__":
    main()