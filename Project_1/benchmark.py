#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import numpy as np
import matplotlib.pyplot as plt

import tic_tac_toe as ttt
import utils as ut

labels = ["Random player", "Monte Carlo player","UCTree player"]

def get_players(player1, N1, player2, N2):
    if N1 is None: 
        J1 = player1()
    else: 
        J1 = player1(N1)
    
    if N2 is None:
        J2 = player2()
    else:
        J2 = player2(N2)
    
    return J1, J2

def play(player1, player2, N1=None, N2=None):
    """
    TODO
    """
    ttt.Jeu(ttt.MorpionState(), *get_players(player1, N1, player2, N2)).run(draw=True)

def histogram(nb_iter, player1, player2, N1=None, N2=None):
    """
    """
    plt.rcdefaults()
    fig, ax = plt.subplots()
    
    players = np.array([str(player1), 'Draws', str(player2)])
    performance = np.arange(len(players))
    
    for _ in range(nb_iter):
        winner,_ = ttt.Jeu(ttt.MorpionState(), *get_players(player1, N1, player2, N2)).run(draw = False)
        performance[1 - winner] += 1
    
    xs = [i + 0.2   for i,_ in enumerate(players)]
    plt.bar(xs, performance)
    plt.ylabel("Number of victories")
    plt.xticks(xs, players)
    plt.show()

def simulation(nb_iter, player1, player2, labels, N1=None, N2=None):
    """
    TODO
    """
    mean1 = np.zeros(nb_iter)
    mean2 = np.zeros(nb_iter)
    xs = np.arange(nb_iter)
    
    if N1 is None:
        J1 = player1()
        strJ1 = labels[0]
    else:
        J1 = player1(N1)
        strJ1 = labels[1]
    if N2 is None:
        J2 = player2()
        strJ2 = labels[0]
    else:
        J2 = player2(N2)
        strJ2 = labels[1]
    
    winner1 = 0
    winner2 = 0
    for i in range(1, nb_iter):
        win,_ = ttt.Jeu(ttt.MorpionState(), J1, J2).run()
        if win == 1:
            winner1 += 1
        elif win == -1:
            winner2 += 1
        mean1[i] = winner1 / i
        mean2[i] = winner2 / i
    
    plt.plot(xs, mean1, 'g-', label="Joueur 1 : " + strJ1)
    plt.plot(xs, mean2, 'r-', label="Joueur 2 : " + strJ2)
    plt.legend(["Joueur 1 : " + strJ1, "Joueur 2 : " + strJ2])
    plt.show()
    
def benchmark_mc_single(player, nb_games, other, reverse):
    ys = np.zeros(nb_games)
    for i in range(nb_games):
        J1 = player
        J2 = other
        ref = 1
        if reverse is True:
            J1, J2 = J2, J1
            ref = -1
        winner,_ = ttt.Jeu(ttt.MorpionState(), J1, J2).run()
        if winner == ref:
            ys[i] = 1
    return ys.cumsum() / (1 + np.arange(nb_games))

def benchmark_mc(player,nb_games,N,reverse=False):
    """
    """
    legend = ['vs random player', 'vs Monte Carlo peer', 'vs UCT player']
    
    print('\nSimulating games against random player...')
    rand = benchmark_mc_single(player, nb_games, ttt.RandomPlayer(), reverse)
    
    print('\nSimulating games against Monte Carlo peer...')
    mc = benchmark_mc_single(player, nb_games, ttt.MonteCarloPlayer(N), reverse)
    
    print('\nSimulating games against upper confidence tree player...')
    uct = benchmark_mc_single(player, nb_games, ttt.UCTPlayer(N), reverse)
    
    ut.plot_all('Games', 'Average victory rate', legend, np.vstack((rand, mc, uct)))

def benchmark_uct_single(player, nb_games, expl_params, other, reverse):
    ys = np.zeros((len(expl_params), nb_games))
    
    for c in range(len(expl_params)):
        ut.UCTree.c = expl_params[c]
        
        for i in range(nb_games):
            J1 = player
            J2 = other
            ref = 1
            if reverse is True:
                J1, J2 = J2, J1
                ref = -1
            
            winner,_ = ttt.Jeu(ttt.MorpionState(),J1,J2).run()
            if winner == ref:
                ys[c][i] = 1
        
        print(f'...benchmark for exploration parameter c = {expl_params[c]} is done')
    
    return ys.cumsum(axis=1) / (1 + np.arange(nb_games))

def benchmark_uct(player,nb_games,expl_params,N,reverse=False):
    """
    """
    legend = [f'c = {c}' for c in expl_params]
    
    print('\nSimulating games against random player...')
    rand = benchmark_uct_single(player, nb_games, expl_params, ttt.RandomPlayer(), reverse)
    
    print('\nSimulating games against Monte Carlo player...')
    mc = benchmark_uct_single(player, nb_games, expl_params, ttt.MonteCarloPlayer(N), reverse)
    
    print('\nPlotting the results of the games played against random player...')
    ut.plot_all('Games', 'Average victory rate', legend, rand)
    
    print('\nPlotting the results of the games played against Monte Carlo player...')
    ut.plot_all('Games', 'Average victory rate', legend, mc)